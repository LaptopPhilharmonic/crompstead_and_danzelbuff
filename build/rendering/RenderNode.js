"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderNode = exports.Units = exports.RelativeTo = exports.RenderNodeID = void 0;
const import_manager_js_1 = require("../import-manager.js");
let nextId = 1;
/** All RenderNodes live here for lookup */
const allNodes = {};
class RenderNodeID {
    constructor() {
        this.number = nextId;
        nextId += 1;
    }
}
exports.RenderNodeID = RenderNodeID;
var RelativeTo;
(function (RelativeTo) {
    RelativeTo["scene"] = "scene";
    RelativeTo["parent"] = "parent";
    RelativeTo["camera"] = "camera";
})(RelativeTo = exports.RelativeTo || (exports.RelativeTo = {}));
var Units;
(function (Units) {
    Units["px"] = "px";
    Units["pc"] = "%";
})(Units = exports.Units || (exports.Units = {}));
class RenderNode {
    constructor(data) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        /** Will not render if this is set to false */
        this.visible = true;
        this.id = new RenderNodeID();
        this.xx = (_a = data.x) !== null && _a !== void 0 ? _a : 0;
        this.xRelativeTo = (_b = data.xRelativeTo) !== null && _b !== void 0 ? _b : RelativeTo.scene;
        this.xUnit = (_c = data.xUnit) !== null && _c !== void 0 ? _c : Units.px;
        this.yy = (_d = data.y) !== null && _d !== void 0 ? _d : 0;
        this.yRelativeTo = (_e = data.yRelativeTo) !== null && _e !== void 0 ? _e : RelativeTo.scene;
        this.yUnit = (_f = data.yUnit) !== null && _f !== void 0 ? _f : Units.px;
        this.ww = (_g = data.w) !== null && _g !== void 0 ? _g : 0;
        this.wRelativeTo = (_h = data.wRelativeTo) !== null && _h !== void 0 ? _h : RelativeTo.scene;
        this.wUnit = (_j = data.wUnit) !== null && _j !== void 0 ? _j : Units.px;
        this.hh = (_k = data.h) !== null && _k !== void 0 ? _k : 0;
        this.hRelativeTo = (_l = data.hRelativeTo) !== null && _l !== void 0 ? _l : RelativeTo.scene;
        this.hUnit = (_m = data.hUnit) !== null && _m !== void 0 ? _m : Units.px;
        this.parentId = data.parent;
        this.children = (_o = data.children) !== null && _o !== void 0 ? _o : [];
        this.sceneId = data.scene;
        this.offsetX = (_p = data.offsetX) !== null && _p !== void 0 ? _p : 0;
        this.offsetY = (_q = data.offsetY) !== null && _q !== void 0 ? _q : 0;
        allNodes[this.id.number] = this;
    }
    get parent() {
        return this.parentId ? allNodes[this.parentId.number] : undefined;
    }
    set parent(p) {
        this.detach();
        if (p instanceof RenderNode) {
            this.parentId = p.id;
            p.addChild(this);
        }
        else {
            this.parentId = undefined;
        }
    }
    /** Removes this RenderNode from its parent and Scene */
    detach() {
        var _a;
        if (this.parent) {
            this.parent.removeChild(this);
        }
        if (this.sceneId) {
            (_a = this.scene) === null || _a === void 0 ? void 0 : _a.removeRenderNode(this);
        }
    }
    /** All these properties have code in common to deal with unit types and relativity to parents */
    getXYWH(setting) {
        const nn = setting + setting; // Hidden variable names for these are always double the character
        const orientation = (setting === 'x' || setting === 'w') ? 'w' : 'h';
        const relativeTo = this[setting + 'RelativeTo'];
        const unit = this[setting + 'Unit'];
        switch (relativeTo) {
            case RelativeTo.scene:
                if (!this.scene) {
                    console.error(this);
                    throw new Error(`RenderNode with id ${this.id.number} is not in a Scene but is position relative to scene`);
                }
                if (unit === Units.px) {
                    return this[nn];
                }
                else if (unit === Units.pc) {
                    return this.scene[orientation] * this[nn];
                }
            case RelativeTo.camera:
                return this[nn]; // The renderer will handle where to put this
            case RelativeTo.parent:
                if (this.parent) {
                    if (unit === Units.px) {
                        return this.parent[setting] + this[nn];
                    }
                    else if (unit === Units.pc) {
                        return this.parent[orientation] * this[nn];
                    }
                }
                else {
                    if (!this.scene) {
                        console.error(this);
                        throw new Error(`RenderNode with id ${this.id.number} is not in a Scene, and has no parent, but is positioned relative to parent`);
                    }
                    if (unit === Units.px) {
                        return this[nn];
                    }
                    else if (unit === Units.pc) {
                        return this.scene[orientation] * this[nn];
                    }
                }
            default:
                return this[nn];
        }
    }
    setXYWH(setting, value, unit, relativeTo) {
        const nn = setting + setting; // Hidden variable names for these are always double the character
        this[nn] = value;
        if (unit) {
            this[setting + 'Unit'] = unit;
        }
        if (relativeTo) {
            this[setting + 'RelativeTo'] = relativeTo;
        }
    }
    get x() {
        return this.getXYWH('x');
    }
    setX(x, unit, relativeTo) {
        this.setXYWH('x', x, unit, relativeTo);
    }
    get y() {
        return this.getXYWH('y');
    }
    setY(y, unit, relativeTo) {
        this.setXYWH('y', y, unit, relativeTo);
    }
    get w() {
        return this.getXYWH('w');
    }
    set w(w) {
        this.ww = w;
    }
    setW(w, unit, relativeTo) {
        this.setXYWH('w', w, unit, relativeTo);
    }
    get h() {
        return this.getXYWH('h');
    }
    set h(h) {
        this.hh = h;
    }
    setH(h, unit, relativeTo) {
        this.setXYWH('h', h, unit, relativeTo);
    }
    /** Adds the node as a child of this node, removing any parent relationship it already has. Returns same node for chaining. */
    addChild(child) {
        if (child instanceof RenderNode) {
            if (!this.children.find((c) => c.number === child.id.number)) {
                child.detach();
                this.children.push(child.id);
                child.parent = this;
            }
        }
        else {
            throw new TypeError('children must be supplied as RenderNode or RenderNodeID');
        }
        return child;
    }
    removeChild(child) {
        const index = this.children.findIndex((c) => c.number === child.id.number);
        if (index > -1) {
            this.children.splice(index, 1);
        }
        child.parentId = undefined;
    }
    isParentOf(child) {
        return !!this.children.find((c) => c.number === child.number);
    }
    /** Looks recursively to parent nodes to establish what Scene this RenderNode is in */
    get scene() {
        var _a;
        if (this.parentId) {
            return (_a = this.parent) === null || _a === void 0 ? void 0 : _a.scene;
        }
        const possibleScene = import_manager_js_1.Scene.byId(this.sceneId);
        return import_manager_js_1.Scene.byId(this.sceneId);
    }
    /** Should only be set on top-level RenderNodes (attached directly to a Scene). Children inherit from the parent. Will throw errors otherwise */
    set scene(scene) {
        if (this.parentId) {
            throw new Error(`This RenderNode has a parent and should not have its Scene changed directly.`);
        }
        if (scene instanceof import_manager_js_1.Scene) {
            this.sceneId = scene.id;
        }
        else {
            this.sceneId = undefined;
        }
    }
    get hasChildren() {
        return this.children.length > 0;
    }
    forEachChild(fn) {
        this.children.forEach((childID) => {
            const possibleChild = RenderNode.byId(childID);
            if (possibleChild) {
                fn(possibleChild);
            }
        });
    }
    /** Remove all references to this RenderNode and any of its children which would otherwise be floating around */
    delete() {
        this.forEachChild((child) => child.delete());
        this.detach();
        delete allNodes[this.id.number];
    }
    static byId(id) {
        return allNodes[id.number];
    }
}
exports.RenderNode = RenderNode;
//# sourceMappingURL=data:application/json;base64,