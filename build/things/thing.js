"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Thing = exports.ThingName = exports.ThingID = void 0;
let nextId = 1;
/**  All Things are stored here for lookup by id */
const allThings = {};
/** Any Thing created or assigned a unique name is referenced here */
const allThingsByName = {};
class ThingID {
    constructor() {
        this.number = nextId;
        nextId += 1;
    }
}
exports.ThingID = ThingID;
/** A unique name for a Thing in the engine. Will throw errors if the name is a duplicate */
class ThingName {
    constructor(name) {
        this.value = name;
    }
}
exports.ThingName = ThingName;
class Thing {
    constructor(data) {
        var _a, _b;
        this.id = new ThingID();
        this.parentId = data === null || data === void 0 ? void 0 : data.parent;
        this.childIds = (_a = data === null || data === void 0 ? void 0 : data.children) !== null && _a !== void 0 ? _a : [];
        this.renderNodeIds = (_b = data === null || data === void 0 ? void 0 : data.renderNodes) !== null && _b !== void 0 ? _b : [];
        allThings[this.id.number] = this;
        if (data === null || data === void 0 ? void 0 : data.uniqueName) {
            if (allThingsByName[data.uniqueName] !== undefined) {
                throw new Error(`A Thing with the unique name ${data.uniqueName} already exists`);
            }
            this.uniqueName = new ThingName(data.uniqueName);
            allThingsByName[data.uniqueName] = this;
        }
    }
    get hasChildren() {
        return this.childIds.length > 0;
    }
    get parent() {
        return this.parentId ? Thing.byId(this.parentId) : undefined;
    }
    addChild(child) {
        const toAdd = child instanceof Thing ? child.id : child;
        if (toAdd && !this.childIds.includes(toAdd)) {
            this.childIds.push(toAdd);
        }
    }
    addChildren(children) {
        children.forEach((child) => this.addChild(child));
    }
    removeChild(child) {
        const toRemove = child instanceof Thing ? child.id : child;
        const index = this.childIds.indexOf(toRemove);
        if (toRemove && index !== -1) {
            this.childIds.splice(index, 1);
        }
    }
    removeChildren(children) {
        children.forEach((child) => this.removeChild(child));
    }
    forEachChild(fn) {
        this.childIds.forEach((id) => {
            const possibleChild = Thing.byId(id);
            if (possibleChild) {
                fn(possibleChild);
            }
        });
    }
    /** Remove all automatically generated references to this thing and any children it has */
    delete() {
        var _a;
        this.forEachChild((child) => child.delete());
        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.removeChild(this);
        delete allThings[this.id.number];
        if (this.uniqueName) {
            delete allThingsByName[this.uniqueName.value];
        }
    }
    /** This is called every cycle of the game engine. Over-write in subclasses to make things do things */
    update(frameTimeStamp) {
        // Does nothing by default
    }
    /** This is called every cycle of the game engine. Over-write in subclasses to handle input if needed */
    handleInput(inputData) {
        // Does nothing by default
    }
    static byId(id) {
        return allThings[id.number];
    }
    static byName(name) {
        return allThingsByName[name.value];
    }
    static forEach(fn) {
        Object.values(allThings).forEach(fn);
    }
}
exports.Thing = Thing;
//# sourceMappingURL=data:application/json;base64,