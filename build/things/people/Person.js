"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Person = void 0;
const import_manager_js_1 = require("../../import-manager.js");
const typescript_helpers_js_1 = require("../../util/typescript-helpers.js");
const math_heleprs_js_1 = require("../../util/math-heleprs.js");
let firstUpdate = true;
class Person extends import_manager_js_1.Thing {
    constructor(data) {
        super(data);
        this._gridX = 0;
        this._gridY = 0;
        this.acceptingInput = false;
        this.firstName = data.firstName;
        this.surname = data.surname;
        this.jobTitle = data.jobTitle;
        this.imgFolder = data.imgFolder;
        this.renderNodes = {
            standing: this.makeDirectionalImage('standing'),
            walking: this.makeDirectionalAnimation('walking', 64, 64, 200, true),
            idle1: this.makeDirectionalAnimation('idle-1', 64, 64, 200, false)
        };
        this.currentRenderNodeId = this.renderNodes.standing.down.id;
        this.actionQueue = [];
        this.direction = 'down';
        this.nextFidgetTime = Infinity;
    }
    updateFidgetTime(frameTimeStamp) {
        this.nextFidgetTime = frameTimeStamp + ((0, math_heleprs_js_1.randomInt)(5, 15) * 500);
    }
    makeDirectionalImage(imageType) {
        const imgStart = `people/${this.imgFolder}/${imageType}`;
        return {
            up: new import_manager_js_1.ImageNode({ imageName: `${imgStart}-u.png`, offsetX: Person.spriteOffsetX, offsetY: Person.spriteOffsetY }),
            down: new import_manager_js_1.ImageNode({ imageName: `${imgStart}-d.png`, offsetX: Person.spriteOffsetX, offsetY: Person.spriteOffsetY }),
            left: new import_manager_js_1.ImageNode({ imageName: `${imgStart}-l.png`, offsetX: Person.spriteOffsetX, offsetY: Person.spriteOffsetY }),
            right: new import_manager_js_1.ImageNode({ imageName: `${imgStart}-r.png`, offsetX: Person.spriteOffsetX, offsetY: Person.spriteOffsetY }),
        };
    }
    makeDirectionalAnimation(animationType, w, h, frameMillis, loops = true) {
        const imgStart = `people/${this.imgFolder}/${animationType}`;
        return {
            up: new import_manager_js_1.AnimationNode({ imageName: `${imgStart}-u.png`, w, h, frameMillis, loops, offsetX: Person.spriteOffsetX, offsetY: Person.spriteOffsetY }),
            down: new import_manager_js_1.AnimationNode({ imageName: `${imgStart}-d.png`, w, h, frameMillis, loops, offsetX: Person.spriteOffsetX, offsetY: Person.spriteOffsetY }),
            left: new import_manager_js_1.AnimationNode({ imageName: `${imgStart}-l.png`, w, h, frameMillis, loops, offsetX: Person.spriteOffsetX, offsetY: Person.spriteOffsetY }),
            right: new import_manager_js_1.AnimationNode({ imageName: `${imgStart}-r.png`, w, h, frameMillis, loops, offsetX: Person.spriteOffsetX, offsetY: Person.spriteOffsetY }),
        };
    }
    get location() {
        return import_manager_js_1.Scene.byId(this.locationId);
    }
    get currentAction() {
        return this.actionQueue[0];
    }
    /** Moves this person to the Location specified, updation any current Location and the new Location objects as appropriate */
    goesTo(location, gridX, gridY) {
        var _a;
        const currentLocation = this.location;
        const newLocation = location instanceof import_manager_js_1.Location ? location : import_manager_js_1.Scene.byId(location);
        if (!newLocation) {
            throw new Error(`Invalid Location not provided - argument was ${location}`);
        }
        this.locationId = newLocation.id;
        currentLocation === null || currentLocation === void 0 ? void 0 : currentLocation.grid.removeThing(this);
        (_a = newLocation.grid.getSquare(gridX, gridY)) === null || _a === void 0 ? void 0 : _a.addThing(this);
        this.gridX = gridX;
        this.gridY = gridY;
        this.currentRenderNode = this.currentRenderNodeId;
        this.snapCurrentRenderNodeToGrid();
    }
    snapCurrentRenderNodeToGrid() {
        var _a, _b, _c, _d;
        this.currentRenderNode.setX(this.gridX * ((_b = (_a = this.location) === null || _a === void 0 ? void 0 : _a.gridSize) !== null && _b !== void 0 ? _b : 1));
        this.currentRenderNode.setY(this.gridY * ((_d = (_c = this.location) === null || _c === void 0 ? void 0 : _c.gridSize) !== null && _d !== void 0 ? _d : 1));
        this.updateGridRenderSlot();
    }
    /** Calling this removes this Person from their current grid-based RenderNode (if they have one), and inserts them into a new one based on location and gridY */
    updateGridRenderSlot() {
        var _a;
        (_a = this.location) === null || _a === void 0 ? void 0 : _a.addRenderNodeAtY(this.currentRenderNode, this.gridY);
    }
    /** Adds a Wait action to this Person's queue */
    waits(millis) {
        this.addAction(new import_manager_js_1.Wait(this, millis));
    }
    set gridY(y) {
        this._gridY = y;
        this.updateGridRenderSlot();
        this.snapCurrentRenderNodeToGrid();
    }
    get gridY() {
        return this._gridY;
    }
    set gridX(x) {
        this._gridX = x;
        this.snapCurrentRenderNodeToGrid();
    }
    get gridX() {
        return this._gridX;
    }
    handleInput(input) {
        if (this.acceptingInput && (!this.currentAction || this.currentAction.complete)) {
            if (input.up.held) {
                this.direction = "up";
                if (this.canWalkUp) {
                    this.walksUp();
                }
            }
            else if (input.down.held) {
                this.direction = 'down';
                if (this.canWalkDown) {
                    this.walksDown();
                }
            }
            else if (input.left.held) {
                this.direction = 'left';
                if (this.canWalkLeft) {
                    this.walksLeft();
                }
            }
            else if (input.right.held) {
                this.direction = 'right';
                if (this.canWalkRight) {
                    this.walksRight();
                }
            }
        }
    }
    /** Queue up an action */
    addAction(action) {
        this.actionQueue.push(action);
    }
    /** Queue up a list of actions (they will be in the order provided) */
    addActions(actions) {
        this.actionQueue.concat(actions);
    }
    walks(direction, squares = 1) {
        var _a;
        this.direction = direction;
        for (let i = 0; i < squares; i += 1) {
            if (this.followedBy) {
                if (this.isIdle && this.followedBy.isIdle) {
                    this.followedBy.waits(100);
                }
                (_a = this.followedBy) === null || _a === void 0 ? void 0 : _a.walksTowards(this._gridX, this._gridY);
            }
            this.addAction(new import_manager_js_1.Walk(this, direction));
        }
    }
    /** Check if this Person's action queue is empty */
    get isIdle() {
        return this.actionQueue.length === 0;
    }
    walksUp(squares = 1) {
        this.walks('up', squares);
        return this;
    }
    walksDown(squares = 1) {
        this.walks('down', squares);
        return this;
    }
    walksLeft(squares = 1) {
        this.walks('left', squares);
        return this;
    }
    walksRight(squares = 1) {
        this.walks('right', squares);
        return this;
    }
    walksTowards(x, y) {
        const xDiff = this.gridX - x;
        const yDiff = this.gridY - y;
        if (Math.abs(xDiff) > Math.abs(yDiff)) {
            if (xDiff < 0 && this.canWalkRight) {
                this.walksRight();
                return;
            }
            if (xDiff > 0 && this.canWalkLeft) {
                this.walksLeft();
                return;
            }
        }
        if (yDiff < 0 && this.canWalkDown) {
            this.walksDown();
            return;
        }
        if (yDiff > 0 && this.canWalkUp) {
            this.walksUp();
        }
    }
    canWalkTo(x, y) {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.location) === null || _a === void 0 ? void 0 : _a.grid.getSquare(x, y)) === null || _b === void 0 ? void 0 : _b.walkable) !== null && _c !== void 0 ? _c : false;
    }
    get canWalkUp() {
        return this.canWalkTo(this.gridX, this.gridY - 1);
    }
    get canWalkDown() {
        return this.canWalkTo(this.gridX, this.gridY + 1);
    }
    get canWalkLeft() {
        return this.canWalkTo(this.gridX - 1, this.gridY);
    }
    get canWalkRight() {
        return this.canWalkTo(this.gridX + 1, this.gridY);
    }
    update(frameTimeStamp) {
        if (firstUpdate) {
            this.updateFidgetTime(frameTimeStamp);
        }
        if (this.currentAction) {
            if (!this.currentAction.inProgress && !this.currentAction.complete) {
                this.currentAction.start();
            }
            if (this.currentAction.complete) {
                this.actionQueue.shift();
                if (this.actionQueue.length === 0) { // Going idle...
                    this.updateFidgetTime(frameTimeStamp);
                    this.currentRenderNode = this.renderNodes.standing[this.direction];
                }
                this.update(frameTimeStamp);
            }
            else {
                this.currentAction.update(frameTimeStamp);
            }
        }
        else { // Idle
            if (frameTimeStamp > this.nextFidgetTime) {
                const fidgetNode = this.renderNodes.idle1[this.direction];
                fidgetNode.reset();
                this.currentRenderNode = fidgetNode;
                this.updateFidgetTime(frameTimeStamp);
            }
            this.snapCurrentRenderNodeToGrid();
        }
        firstUpdate = false;
    }
    /** The current RenderNode always gets put in the Location of this Person */
    set currentRenderNode(node) {
        var _a;
        if (this.currentRenderNodeId) {
            this.currentRenderNode.detach();
        }
        if (node instanceof import_manager_js_1.RenderNode) {
            this.currentRenderNodeId = node.id;
        }
        else {
            this.currentRenderNodeId = node;
        }
        (_a = this.location) === null || _a === void 0 ? void 0 : _a.addRenderNodeAtY(this.currentRenderNode, this.gridY);
    }
    get currentRenderNode() {
        return (0, typescript_helpers_js_1.definitely)(import_manager_js_1.RenderNode.byId(this.currentRenderNodeId));
    }
    // Tell this person to keep walking after another person
    follows(otherPerson) {
        this.following = otherPerson;
        otherPerson.followedBy = this;
    }
    stopsFollowing() {
        var _a;
        if ((_a = this.following) === null || _a === void 0 ? void 0 : _a.followedBy) {
            this.following.followedBy = undefined;
        }
        this.following = undefined;
    }
    /** Is this person one square up, down, left or right of the other person */
    isNextTo(otherPerson) {
        if (this.location !== otherPerson.location) {
            return false;
        }
        const xDiff = Math.abs(this.gridX - otherPerson.gridX);
        if (xDiff > 1) {
            return false;
        }
        const yDiff = Math.abs(this.gridY - otherPerson.gridY);
        if (yDiff > 1) {
            return false;
        }
        if (xDiff === 1 && yDiff === 1) {
            return false;
        }
        return true;
    }
}
exports.Person = Person;
Person.spriteOffsetX = -24;
Person.spriteOffsetY = -38;
//# sourceMappingURL=data:application/json;base64,