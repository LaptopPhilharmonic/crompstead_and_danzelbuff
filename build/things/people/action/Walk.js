"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Walk = void 0;
const import_manager_js_1 = require("../../../import-manager.js");
class Walk extends import_manager_js_1.Action {
    constructor(person, direction, duration = 200) {
        super();
        this.person = person;
        this.direction = direction;
        this.duration = duration;
        // Will be initt'd when the start() method is called
        this.fromSquare = { x: 0, y: 0 };
        this.toSquare = { x: 0, y: 0 };
        this.fromPx = { x: 0, y: 0 };
        this.toPx = { x: 0, y: 0 };
        this.xChange = 0;
        this.yChange = 0;
    }
    start() {
        var _a, _b, _c;
        super.start();
        this.fromSquare = {
            x: this.person.gridX,
            y: this.person.gridY,
        };
        let toX = undefined;
        let toY = undefined;
        switch (this.direction) {
            case 'up':
                toY = this.fromSquare.y - 1;
                break;
            case 'down':
                toY = this.fromSquare.y + 1;
                break;
            case 'left':
                toX = this.fromSquare.x - 1;
                break;
            case 'right':
                toX = this.fromSquare.x + 1;
        }
        this.toSquare = {
            x: toX ? toX : this.person.gridX,
            y: toY ? toY : this.person.gridY,
        };
        // Location should really exist but you never know
        const gridSize = (_c = (_b = (_a = this.person) === null || _a === void 0 ? void 0 : _a.location) === null || _b === void 0 ? void 0 : _b.gridSize) !== null && _c !== void 0 ? _c : 1;
        // We need to lop a pixel off the distance in the direction travelled to stop jerky walking if the key stays held in
        let xReduction = 0;
        if (this.direction === 'left') {
            xReduction = -1;
        }
        else if (this.direction === 'right') {
            xReduction = 1;
        }
        let yReduction = 0;
        if (this.direction === 'up') {
            yReduction = -1;
        }
        else if (this.direction === 'down') {
            yReduction = 1;
        }
        // Used to smooth walking motion when holding down key for multiple squares
        const frameFactor = gridSize / (this.duration / import_manager_js_1.gameData.frameLengthMillis);
        this.xChange = (gridSize * xReduction) - xReduction * frameFactor;
        this.yChange = (gridSize * yReduction) - yReduction * frameFactor;
        this.fromPx = {
            x: (this.fromSquare.x * gridSize) + xReduction * frameFactor,
            y: (this.fromSquare.y * gridSize) + yReduction * frameFactor,
        };
        this.toPx = {
            x: this.toSquare.x * gridSize,
            y: this.toSquare.y * gridSize,
        };
        const renderNode = this.person.renderNodes.walking[this.direction];
        renderNode.setX(this.fromPx.x);
        renderNode.setY(this.fromPx.y);
        this.person.currentRenderNode = renderNode;
        this.person.gridX = this.toSquare.x;
        this.person.gridY = this.toSquare.y;
    }
    update(frameTimeStamp) {
        const amountComplete = (frameTimeStamp - this.startTime) / this.duration;
        if (amountComplete < 1) {
            this.person.currentRenderNode.setX(this.fromPx.x + Math.round(this.xChange * amountComplete));
            this.person.currentRenderNode.setY(this.fromPx.y + Math.round(this.yChange * amountComplete));
        }
        else {
            this.person.snapCurrentRenderNodeToGrid();
            this.finish();
        }
    }
}
exports.Walk = Walk;
//# sourceMappingURL=data:application/json;base64,