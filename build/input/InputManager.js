"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputManager = exports.KeyData = void 0;
const defaultConfig = {
    up: 'ArrowUp',
    down: 'ArrowDown',
    left: 'ArrowLeft',
    right: 'ArrowRight',
    interact: ' ',
};
/** A snapshot of data for a key for one cycle of the engine */
class KeyData {
    constructor(held, justPressed, justReleased) {
        this.justPressed = justPressed;
        this.held = held;
        this.justReleased = justReleased;
    }
}
exports.KeyData = KeyData;
function blankKeys() {
    return {
        up: false,
        down: false,
        left: false,
        right: false,
        interact: false,
    };
}
function cloneKeys(keys) {
    return {
        up: keys.up,
        down: keys.down,
        left: keys.left,
        right: keys.right,
        interact: keys.interact,
    };
}
class InputManager {
    constructor(config) {
        this.config = config !== null && config !== void 0 ? config : defaultConfig;
        this.previousKeys = blankKeys();
        this.keys = blankKeys();
    }
    listenTo(listenTarget) {
        listenTarget.addEventListener('keydown', (event) => {
            this.handleKey(event.key, true);
        });
        listenTarget.addEventListener('keyup', (event) => {
            this.handleKey(event.key, false);
        });
    }
    handleKey(keyName, pressedDown) {
        switch (keyName) {
            case this.config.up:
                this.keys.up = pressedDown;
                break;
            case this.config.down:
                this.keys.down = pressedDown;
                break;
            case this.config.left:
                this.keys.left = pressedDown;
                break;
            case this.config.right:
                this.keys.right = pressedDown;
                break;
            case this.config.interact:
                this.keys.interact = pressedDown;
                break;
        }
    }
    cycleKeyData() {
        const keyData = {
            up: this.getKeyData(this.keys.up, this.previousKeys.up),
            down: this.getKeyData(this.keys.down, this.previousKeys.down),
            left: this.getKeyData(this.keys.left, this.previousKeys.left),
            right: this.getKeyData(this.keys.right, this.previousKeys.right),
            interact: this.getKeyData(this.keys.interact, this.previousKeys.interact),
        };
        this.previousKeys = Object.assign({}, this.keys);
        return keyData;
    }
    getKeyData(key, previousKey) {
        return new KeyData(key, key && !previousKey, !key && previousKey);
    }
}
exports.InputManager = InputManager;
//# sourceMappingURL=data:application/json;base64,