"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene = exports.SceneID = void 0;
const import_manager_js_1 = require("../import-manager.js");
let nextId = 1;
/** All RenderNodes live here for lookup */
const allScenes = {};
class SceneID {
    constructor() {
        this.number = nextId;
        nextId += 1;
    }
}
exports.SceneID = SceneID;
class Scene {
    constructor(data) {
        this.id = new SceneID();
        this.w = data.w;
        this.h = data.h;
        this.renderNodeIDs = [];
        allScenes[this.id.number] = this;
    }
    get renderNodes() {
        return this.renderNodeIDs.map((id) => import_manager_js_1.RenderNode.byId(id)).filter((node) => node !== null);
    }
    /** Adds a render node, and returns that node for reference. Unless it doesn't exist - it'll throw an error then. */
    addRenderNode(node) {
        const id = node instanceof import_manager_js_1.RenderNode ? node.id : node;
        if (!this.renderNodeIDs.includes(id)) {
            this.renderNodeIDs.push(id);
        }
        const actualNode = node instanceof import_manager_js_1.RenderNode ? node : import_manager_js_1.RenderNode.byId(id);
        if (!actualNode) {
            throw new Error(`No RenderNode exists with ID ${id}`);
        }
        actualNode.scene = this.id;
        return actualNode;
    }
    addRenderNodes(nodes) {
        nodes.forEach((node) => this.addRenderNode(node));
    }
    /** Removes the ID of the RenderNode from this Scene, but does not delete the RenderNode itself */
    removeRenderNode(node) {
        const id = node instanceof import_manager_js_1.RenderNode ? node.id : node;
        if (this.renderNodeIDs.includes(id)) {
            this.renderNodeIDs = this.renderNodeIDs.filter((n) => n !== id);
        }
        const actualNode = node instanceof import_manager_js_1.RenderNode ? node : import_manager_js_1.RenderNode.byId(node);
        if (actualNode) {
            actualNode.scene = null;
        }
    }
    /** Removes the IDs of the RenderNodes from this Scene, but does not delete the RenderNodes themselves */
    removeRenderNodes(nodes) {
        nodes.forEach((n) => this.removeRenderNode(n));
    }
    static byId(id) {
        return id ? allScenes[id.number] : null;
    }
}
exports.Scene = Scene;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2NlbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zY2VuZXMvU2NlbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNERBQWdFO0FBR2hFLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztBQUVmLDJDQUEyQztBQUMzQyxNQUFNLFNBQVMsR0FBMkIsRUFBRSxDQUFDO0FBRTdDLE1BQWEsT0FBTztJQUdoQjtRQUNJLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLE1BQU0sSUFBSSxDQUFDLENBQUM7SUFDaEIsQ0FBQztDQUNKO0FBUEQsMEJBT0M7QUFPRCxNQUFhLEtBQUs7SUFNZCxZQUFZLElBQWU7UUFDdkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNoQixJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDaEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUM7UUFFeEIsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDWCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyw4QkFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBaUIsQ0FBQztJQUMvRyxDQUFDO0lBRUQsb0hBQW9IO0lBQ3BILGFBQWEsQ0FBQyxJQUErQjtRQUN6QyxNQUFNLEVBQUUsR0FBRyxJQUFJLFlBQVksOEJBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNsQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUMvQjtRQUNELE1BQU0sVUFBVSxHQUFHLElBQUksWUFBWSw4QkFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLDhCQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNFLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDYixNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3pEO1FBQ0QsVUFBVSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQzNCLE9BQU8sVUFBVSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxjQUFjLENBQUMsS0FBb0M7UUFDL0MsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxrR0FBa0c7SUFDbEcsZ0JBQWdCLENBQUMsSUFBK0I7UUFDNUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxZQUFZLDhCQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUN2RCxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQTtTQUNsRTtRQUNELE1BQU0sVUFBVSxHQUFHLElBQUksWUFBWSw4QkFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLDhCQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdFLElBQUksVUFBVSxFQUFFO1lBQ1osVUFBVSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDM0I7SUFDTCxDQUFDO0lBRUQseUdBQXlHO0lBQ3pHLGlCQUFpQixDQUFDLEtBQW9DO1FBQ2xELEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQWtCO1FBQzFCLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDNUMsQ0FBQztDQUNKO0FBekRELHNCQXlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlbmRlck5vZGUsIFJlbmRlck5vZGVJRCB9IGZyb20gJy4uL2ltcG9ydC1tYW5hZ2VyLmpzJztcclxuaW1wb3J0IHsgTWF5YmUgfSBmcm9tICcuLi91dGlsL3R5cGVzY3JpcHQtaGVscGVycy5qcyc7XHJcblxyXG5sZXQgbmV4dElkID0gMTtcclxuXHJcbi8qKiBBbGwgUmVuZGVyTm9kZXMgbGl2ZSBoZXJlIGZvciBsb29rdXAgKi9cclxuY29uc3QgYWxsU2NlbmVzOiB7W2tleTogbnVtYmVyXTogU2NlbmV9ID0ge307XHJcblxyXG5leHBvcnQgY2xhc3MgU2NlbmVJRCB7XHJcbiAgICBudW1iZXI6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLm51bWJlciA9IG5leHRJZDtcclxuICAgICAgICBuZXh0SWQgKz0gMTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgU2NlbmVEYXRhID0ge1xyXG4gICAgdzogbnVtYmVyO1xyXG4gICAgaDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU2NlbmUge1xyXG4gICAgaWQ6IFNjZW5lSUQ7XHJcbiAgICB3OiBudW1iZXI7XHJcbiAgICBoOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHJlbmRlck5vZGVJRHM6IFJlbmRlck5vZGVJRFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IFNjZW5lRGF0YSkge1xyXG4gICAgICAgIHRoaXMuaWQgPSBuZXcgU2NlbmVJRCgpO1xyXG4gICAgICAgIHRoaXMudyA9IGRhdGEudztcclxuICAgICAgICB0aGlzLmggPSBkYXRhLmg7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJOb2RlSURzID0gW107XHJcbiAgICAgICAgXHJcbiAgICAgICAgYWxsU2NlbmVzW3RoaXMuaWQubnVtYmVyXSA9IHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHJlbmRlck5vZGVzKCk6IFJlbmRlck5vZGVbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyTm9kZUlEcy5tYXAoKGlkKSA9PiBSZW5kZXJOb2RlLmJ5SWQoaWQpKS5maWx0ZXIoKG5vZGUpID0+IG5vZGUgIT09IG51bGwpIGFzIFJlbmRlck5vZGVbXTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQWRkcyBhIHJlbmRlciBub2RlLCBhbmQgcmV0dXJucyB0aGF0IG5vZGUgZm9yIHJlZmVyZW5jZS4gVW5sZXNzIGl0IGRvZXNuJ3QgZXhpc3QgLSBpdCdsbCB0aHJvdyBhbiBlcnJvciB0aGVuLiAqL1xyXG4gICAgYWRkUmVuZGVyTm9kZShub2RlOiBSZW5kZXJOb2RlIHwgUmVuZGVyTm9kZUlEKTogUmVuZGVyTm9kZSB7XHJcbiAgICAgICAgY29uc3QgaWQgPSBub2RlIGluc3RhbmNlb2YgUmVuZGVyTm9kZSA/IG5vZGUuaWQgOiBub2RlO1xyXG4gICAgICAgIGlmICghdGhpcy5yZW5kZXJOb2RlSURzLmluY2x1ZGVzKGlkKSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlck5vZGVJRHMucHVzaChpZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGFjdHVhbE5vZGUgPSBub2RlIGluc3RhbmNlb2YgUmVuZGVyTm9kZSA/IG5vZGUgOiBSZW5kZXJOb2RlLmJ5SWQoaWQpO1xyXG4gICAgICAgIGlmICghYWN0dWFsTm9kZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIFJlbmRlck5vZGUgZXhpc3RzIHdpdGggSUQgJHtpZH1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWN0dWFsTm9kZS5zY2VuZSA9IHRoaXMuaWQ7XHJcbiAgICAgICAgcmV0dXJuIGFjdHVhbE5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkUmVuZGVyTm9kZXMobm9kZXM6IFJlbmRlck5vZGVbXSB8IFJlbmRlck5vZGVJRFtdKSB7XHJcbiAgICAgICAgbm9kZXMuZm9yRWFjaCgobm9kZSkgPT4gdGhpcy5hZGRSZW5kZXJOb2RlKG5vZGUpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogUmVtb3ZlcyB0aGUgSUQgb2YgdGhlIFJlbmRlck5vZGUgZnJvbSB0aGlzIFNjZW5lLCBidXQgZG9lcyBub3QgZGVsZXRlIHRoZSBSZW5kZXJOb2RlIGl0c2VsZiAqL1xyXG4gICAgcmVtb3ZlUmVuZGVyTm9kZShub2RlOiBSZW5kZXJOb2RlIHwgUmVuZGVyTm9kZUlEKSB7XHJcbiAgICAgICAgY29uc3QgaWQgPSBub2RlIGluc3RhbmNlb2YgUmVuZGVyTm9kZSA/IG5vZGUuaWQgOiBub2RlO1xyXG4gICAgICAgIGlmICh0aGlzLnJlbmRlck5vZGVJRHMuaW5jbHVkZXMoaWQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTm9kZUlEcyA9IHRoaXMucmVuZGVyTm9kZUlEcy5maWx0ZXIoKG4pID0+IG4gIT09IGlkKVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhY3R1YWxOb2RlID0gbm9kZSBpbnN0YW5jZW9mIFJlbmRlck5vZGUgPyBub2RlIDogUmVuZGVyTm9kZS5ieUlkKG5vZGUpO1xyXG4gICAgICAgIGlmIChhY3R1YWxOb2RlKSB7XHJcbiAgICAgICAgICAgIGFjdHVhbE5vZGUuc2NlbmUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogUmVtb3ZlcyB0aGUgSURzIG9mIHRoZSBSZW5kZXJOb2RlcyBmcm9tIHRoaXMgU2NlbmUsIGJ1dCBkb2VzIG5vdCBkZWxldGUgdGhlIFJlbmRlck5vZGVzIHRoZW1zZWx2ZXMgKi9cclxuICAgIHJlbW92ZVJlbmRlck5vZGVzKG5vZGVzOiBSZW5kZXJOb2RlW10gfCBSZW5kZXJOb2RlSURbXSkge1xyXG4gICAgICAgIG5vZGVzLmZvckVhY2goKG4pID0+IHRoaXMucmVtb3ZlUmVuZGVyTm9kZShuKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGJ5SWQoaWQ6IE1heWJlPFNjZW5lSUQ+KTogTWF5YmU8U2NlbmU+IHtcclxuICAgICAgICByZXR1cm4gaWQgPyBhbGxTY2VuZXNbaWQubnVtYmVyXSA6IG51bGw7XHJcbiAgICB9XHJcbn0iXX0=