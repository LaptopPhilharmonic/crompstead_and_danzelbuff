"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Grid = exports.GridSquare = exports.GridId = void 0;
const typescript_helpers_js_1 = require("../util/typescript-helpers.js");
const import_manager_js_1 = require("../import-manager.js");
const pathfinder_js_1 = require("./pathfinder.js");
/** For managing data for grid-based game logic */
let nextGridId = 1;
const allGrids = {};
class GridId {
    constructor() {
        this.number = nextGridId;
        nextGridId += 1;
    }
}
exports.GridId = GridId;
class GridSquare {
    constructor(grid, x, y, walkable) {
        this.thingIds = [];
        this.gridId = grid.id;
        this.x = x;
        this.y = y;
        this.walkable = walkable;
        this.interactionKey = '';
        this.walkoverKey = '';
        this.refNumber = (y * grid.width) + x;
    }
    get parentGrid() {
        const parent = Grid.byId(this.gridId);
        if (!parent) {
            throw new Error('No parent Grid found for this GridSquare. How can this happen?');
        }
        return parent;
    }
    get isInteractable() {
        return this.interactionKey !== '';
    }
    get hasWalkover() {
        return this.walkoverKey !== '';
    }
    get things() {
        return (0, typescript_helpers_js_1.filterDefinitely)(this.thingIds.map((id) => import_manager_js_1.Thing.byId(id)));
    }
    get coordinates() {
        return { x: this.x, y: this.y };
    }
    /** Add a Thing to this square (if it isn't there already) */
    addThing(thing) {
        const id = thing instanceof import_manager_js_1.Thing ? thing.id : thing;
        if (!this.thingIds.includes(id)) {
            this.thingIds.push(id);
        }
    }
    /** Remove a Thing from this square if it's there */
    removeThing(thing) {
        const id = thing instanceof import_manager_js_1.Thing ? thing.id : thing;
        const thingIndex = this.thingIds.indexOf(id);
        if (thingIndex > -1) {
            this.thingIds.splice(thingIndex, 1);
        }
    }
    /** Get another square in this grid relative to this square. Negative numbers for up and left, positive for down and right */
    getRelativeNeighbour(relativeX, relativeY) {
        return this.parentGrid.getSquare(this.x + relativeX, this.y + relativeY);
    }
    getNeighbourAbove() {
        return this.getRelativeNeighbour(0, -1);
    }
    getNeighbourToRight() {
        return this.getRelativeNeighbour(1, 0);
    }
    getNeighbourBelow() {
        return this.getRelativeNeighbour(0, 1);
    }
    getNeighbourToLeft() {
        return this.getRelativeNeighbour(-1, 0);
    }
    getAllNeighbours() {
        const neighbours = [];
        const above = this.getNeighbourAbove();
        const below = this.getNeighbourBelow();
        const toLeft = this.getNeighbourToLeft();
        const toRight = this.getNeighbourToRight();
        if (above) {
            neighbours.push(above);
        }
        if (below) {
            neighbours.push(below);
        }
        if (toLeft) {
            neighbours.push(toLeft);
        }
        if (toRight) {
            neighbours.push(toRight);
        }
        return neighbours;
    }
}
exports.GridSquare = GridSquare;
class Grid {
    /** Pass it an array of strings like this:
     * 'XXX'
     * 'X-X'
     * 'XXX'
     * For quick auto-population of no-go squares
     *
     * X = No-go
     * - = Walkable
     *
     * Grid slots can contain an interactive element which you can supply as you like, and
     * you can edit the walkability of individual squares later on
    */
    constructor(basicLayout) {
        this.squaresArray = [];
        if (basicLayout.length === 0 || !basicLayout.every((row) => row.length === basicLayout[0].length)) {
            throw new Error('The grid should have at least one row, and all rows should be of the same length');
        }
        this.id = new GridId();
        this.width = basicLayout[0].length;
        this.height = basicLayout.length;
        this.squares = {};
        basicLayout.forEach((row, rowIndex) => {
            row.split('').forEach((column, columnIndex) => {
                const square = new GridSquare(this, columnIndex, rowIndex, column.toUpperCase() !== 'X');
                this.squares[`${columnIndex}-${rowIndex}`] = square;
                this.squaresArray.push(square);
            });
        });
        allGrids[this.id.number] = this;
    }
    getSquare(x, y) {
        return this.squares[`${x}-${y}`];
    }
    /** Remove a thing from all squares in this grid */
    removeThing(thing) {
        this.squaresArray.forEach((square) => square.removeThing(thing));
    }
    /** Use an algorithm to find a path from the first square to the second. Returns an empty array if it fails */
    findPath(from, to) {
        const fromSquare = this.getSquare(from.x, from.y);
        const toSquare = this.getSquare(to.x, to.y);
        if (fromSquare && toSquare) {
            return (0, pathfinder_js_1.getRoute)(fromSquare, toSquare);
        }
        else {
            return [];
        }
    }
    static byId(id) {
        return allGrids[id.number];
    }
}
exports.Grid = Grid;
//# sourceMappingURL=data:application/json;base64,