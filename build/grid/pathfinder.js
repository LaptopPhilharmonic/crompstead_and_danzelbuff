"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRoute = void 0;
;
function absolueClosenessOf(square1, square2) {
    return (Math.abs(square2.x - square1.x) + Math.abs(square2.y - square1.y));
}
function getRoute(from, to) {
    let assessedSquareRefs = [];
    let assessments = [{ square: to, previous: null, distance: absolueClosenessOf(to, from) }];
    function canditateNeighboursOf(square) {
        return square.getAllNeighbours().filter((n) => {
            return n.walkable && !assessedSquareRefs[n.refNumber];
        });
    }
    function assess(previous) {
        const candidates = canditateNeighboursOf(previous.square);
        candidates.forEach((candidate) => {
            assessments.push({
                square: candidate,
                previous,
                distance: absolueClosenessOf(candidate, from),
            });
        });
        assessedSquareRefs[previous.square.refNumber] = true;
        assessments.splice(assessments.findIndex((a) => a.square.refNumber === previous.square.refNumber), 1);
    }
    function getNextToAssess() {
        let next = null;
        for (let i = 0; i < assessments.length; i += 1) {
            if (assessments[i].square.refNumber === from.refNumber) {
                return assessments[i];
            }
            if (!next || assessments[i].distance < next.distance) {
                next = assessments[i];
            }
        }
        return next;
    }
    while (!assessedSquareRefs[from.refNumber] && assessments.length > 0) {
        const next = getNextToAssess();
        if ((next === null || next === void 0 ? void 0 : next.square.refNumber) === from.refNumber) {
            assessedSquareRefs[from.refNumber] = true;
            break;
        }
        if (next) {
            assess(next);
        }
        else {
            break;
        }
    }
    if (assessedSquareRefs[from.refNumber]) {
        let result = [];
        let current = assessments.find((a) => a.square.refNumber === from.refNumber);
        while (current) {
            result.push(current.square);
            current = current === null || current === void 0 ? void 0 : current.previous;
        }
        return result;
    }
    else {
        return [];
    }
}
exports.getRoute = getRoute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aGZpbmRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2dyaWQvcGF0aGZpbmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFPQyxDQUFDO0FBRUYsU0FBUyxrQkFBa0IsQ0FBQyxPQUFtQixFQUFFLE9BQW1CO0lBQ2hFLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvRSxDQUFDO0FBRUQsU0FBZ0IsUUFBUSxDQUFDLElBQWdCLEVBQUUsRUFBYztJQUNyRCxJQUFJLGtCQUFrQixHQUFjLEVBQUUsQ0FBQztJQUN2QyxJQUFJLFdBQVcsR0FBc0IsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsa0JBQWtCLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUU5RyxTQUFTLHFCQUFxQixDQUFDLE1BQWtCO1FBQzdDLE9BQU8sTUFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDM0MsT0FBTyxDQUFDLENBQUMsUUFBUSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3pELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELFNBQVMsTUFBTSxDQUFDLFFBQXlCO1FBQ3JDLE1BQU0sVUFBVSxHQUFHLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxRCxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDN0IsV0FBVyxDQUFDLElBQUksQ0FBQztnQkFDYixNQUFNLEVBQUUsU0FBUztnQkFDakIsUUFBUTtnQkFDUixRQUFRLEVBQUUsa0JBQWtCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQzthQUNoRCxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztRQUNILGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3JELFdBQVcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMxRyxDQUFDO0lBRUQsU0FBUyxlQUFlO1FBQ3BCLElBQUksSUFBSSxHQUEyQixJQUFJLENBQUM7UUFDeEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM1QyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxLQUFLLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ3BELE9BQU8sV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3pCO1lBQ0QsSUFBSSxDQUFDLElBQUksSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2xELElBQUksR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDekI7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxPQUFPLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ2xFLE1BQU0sSUFBSSxHQUFHLGVBQWUsRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsTUFBTSxDQUFDLFNBQVMsTUFBSyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQzNDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUM7WUFDMUMsTUFBTTtTQUNUO1FBQ0QsSUFBSSxJQUFJLEVBQUU7WUFDTixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEI7YUFBTTtZQUNILE1BQU07U0FDVDtLQUNKO0lBRUQsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDcEMsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksT0FBTyxHQUEyQixXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFckcsT0FBTyxPQUFPLEVBQUU7WUFDWixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM1QixPQUFPLEdBQUcsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLFFBQVEsQ0FBQztTQUMvQjtRQUVELE9BQU8sTUFBTSxDQUFDO0tBQ2pCO1NBQU07UUFDSCxPQUFPLEVBQUUsQ0FBQztLQUNiO0FBRUwsQ0FBQztBQS9ERCw0QkErREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmlkLCBHcmlkU3F1YXJlIH0gZnJvbSAnLi4vaW1wb3J0LW1hbmFnZXIuanMnO1xyXG5pbXBvcnQgeyBNYXliZSB9IGZyb20gJy4uL3V0aWwvdHlwZXNjcmlwdC1oZWxwZXJzLmpzJztcclxuXHJcbmludGVyZmFjZSBSb3V0ZUFzc2Vzc21lbnQge1xyXG4gICAgc3F1YXJlOiBHcmlkU3F1YXJlO1xyXG4gICAgcHJldmlvdXM6IE1heWJlPFJvdXRlQXNzZXNzbWVudD47XHJcbiAgICBkaXN0YW5jZTogbnVtYmVyO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gYWJzb2x1ZUNsb3NlbmVzc09mKHNxdWFyZTE6IEdyaWRTcXVhcmUsIHNxdWFyZTI6IEdyaWRTcXVhcmUpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIChNYXRoLmFicyhzcXVhcmUyLnggLSBzcXVhcmUxLngpICsgTWF0aC5hYnMoc3F1YXJlMi55IC0gc3F1YXJlMS55KSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSb3V0ZShmcm9tOiBHcmlkU3F1YXJlLCB0bzogR3JpZFNxdWFyZSk6IEdyaWRTcXVhcmVbXSB7XHJcbiAgICBsZXQgYXNzZXNzZWRTcXVhcmVSZWZzOiBib29sZWFuW10gPSBbXTtcclxuICAgIGxldCBhc3Nlc3NtZW50czogUm91dGVBc3Nlc3NtZW50W10gPSBbeyBzcXVhcmU6IHRvLCBwcmV2aW91czogbnVsbCwgZGlzdGFuY2U6IGFic29sdWVDbG9zZW5lc3NPZih0bywgZnJvbSkgfV07XHJcblxyXG4gICAgZnVuY3Rpb24gY2FuZGl0YXRlTmVpZ2hib3Vyc09mKHNxdWFyZTogR3JpZFNxdWFyZSk6IEdyaWRTcXVhcmVbXSB7XHJcbiAgICAgICAgcmV0dXJuIHNxdWFyZS5nZXRBbGxOZWlnaGJvdXJzKCkuZmlsdGVyKChuKSA9PiB7XHJcbiAgICAgICAgICAgcmV0dXJuIG4ud2Fsa2FibGUgJiYgIWFzc2Vzc2VkU3F1YXJlUmVmc1tuLnJlZk51bWJlcl07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYXNzZXNzKHByZXZpb3VzOiBSb3V0ZUFzc2Vzc21lbnQpIHtcclxuICAgICAgICBjb25zdCBjYW5kaWRhdGVzID0gY2FuZGl0YXRlTmVpZ2hib3Vyc09mKHByZXZpb3VzLnNxdWFyZSk7XHJcbiAgICAgICAgY2FuZGlkYXRlcy5mb3JFYWNoKChjYW5kaWRhdGUpID0+IHtcclxuICAgICAgICAgICAgYXNzZXNzbWVudHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBzcXVhcmU6IGNhbmRpZGF0ZSxcclxuICAgICAgICAgICAgICAgIHByZXZpb3VzLFxyXG4gICAgICAgICAgICAgICAgZGlzdGFuY2U6IGFic29sdWVDbG9zZW5lc3NPZihjYW5kaWRhdGUsIGZyb20pLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBhc3Nlc3NlZFNxdWFyZVJlZnNbcHJldmlvdXMuc3F1YXJlLnJlZk51bWJlcl0gPSB0cnVlO1xyXG4gICAgICAgIGFzc2Vzc21lbnRzLnNwbGljZShhc3Nlc3NtZW50cy5maW5kSW5kZXgoKGEpID0+IGEuc3F1YXJlLnJlZk51bWJlciA9PT0gcHJldmlvdXMuc3F1YXJlLnJlZk51bWJlciksIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldE5leHRUb0Fzc2VzcygpOiBNYXliZTxSb3V0ZUFzc2Vzc21lbnQ+IHtcclxuICAgICAgICBsZXQgbmV4dDogTWF5YmU8Um91dGVBc3Nlc3NtZW50PiA9IG51bGw7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhc3Nlc3NtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICBpZiAoYXNzZXNzbWVudHNbaV0uc3F1YXJlLnJlZk51bWJlciA9PT0gZnJvbS5yZWZOdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhc3Nlc3NtZW50c1tpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIW5leHQgfHwgYXNzZXNzbWVudHNbaV0uZGlzdGFuY2UgPCBuZXh0LmRpc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0ID0gYXNzZXNzbWVudHNbaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5leHQ7XHJcbiAgICB9XHJcblxyXG4gICAgd2hpbGUgKCFhc3Nlc3NlZFNxdWFyZVJlZnNbZnJvbS5yZWZOdW1iZXJdICYmIGFzc2Vzc21lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBjb25zdCBuZXh0ID0gZ2V0TmV4dFRvQXNzZXNzKCk7XHJcbiAgICAgICAgaWYgKG5leHQ/LnNxdWFyZS5yZWZOdW1iZXIgPT09IGZyb20ucmVmTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGFzc2Vzc2VkU3F1YXJlUmVmc1tmcm9tLnJlZk51bWJlcl0gPSB0cnVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5leHQpIHtcclxuICAgICAgICAgICAgYXNzZXNzKG5leHQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoYXNzZXNzZWRTcXVhcmVSZWZzW2Zyb20ucmVmTnVtYmVyXSkge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcclxuICAgICAgICBsZXQgY3VycmVudDogTWF5YmU8Um91dGVBc3Nlc3NtZW50PiA9IGFzc2Vzc21lbnRzLmZpbmQoKGEpID0+IGEuc3F1YXJlLnJlZk51bWJlciA9PT0gZnJvbS5yZWZOdW1iZXIpO1xyXG5cclxuICAgICAgICB3aGlsZSAoY3VycmVudCkge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChjdXJyZW50LnNxdWFyZSk7XHJcbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Py5wcmV2aW91cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbn0iXX0=